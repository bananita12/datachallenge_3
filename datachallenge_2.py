{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "\n",
    "class Estrella:\n",
    "    LSun = 3.828e26  # Solar luminosity in watts\n",
    "    MSun = 1.9884e30  # Solar mass in kilograms\n",
    "\n",
    "    def __init__(self, nombre, masa, radio, temperatura, distancia, movimiento_propio):\n",
    "        self.nombre = nombre\n",
    "        self._masa = masa\n",
    "        self._radio = radio\n",
    "        self._temperatura = temperatura\n",
    "        self._distancia = distancia\n",
    "        self._movimiento_propio = movimiento_propio\n",
    "\n",
    "    def calcular_luminosidad_total(self):\n",
    "        return 4 * np.pi * self._radio**2 * self._temperatura\n",
    "\n",
    "    def calcular_luminosidad_secuencia_principal(self):\n",
    "        return self.LSun * (self._masa / self.MSun)**3.5\n",
    "\n",
    "class SistemaPlanetario:\n",
    "    def __init__(self, *planetas):\n",
    "        self.estrellas = []\n",
    "        self.planetas = list(planetas)\n",
    "    \n",
    "    def agregar_estrella(self, estrella):\n",
    "        self.estrellas.append(estrella)\n",
    "    \n",
    "    def agregar_planeta(self, planeta):\n",
    "        self.planetas.append(planeta)\n",
    "    \n",
    "    def imprimir_informacion_publica(self):\n",
    "        print(\"Información pública de los sistemas planetarios:\")\n",
    "        for estrella in self.estrellas:\n",
    "            print(f\"Nombre: {estrella.nombre}, Masa: {estrella._masa}, Radio: {estrella._radio}, Temperatura: {estrella._temperatura}, Distancia: {estrella._distancia}, Movimiento propio: {estrella._movimiento_propio}\")\n",
    "        \n",
    "        print(\"Información pública de los planetas:\")\n",
    "        for planeta in self.planetas:\n",
    "            print(f\"Nombre: {planeta.nombre}, Masa: {planeta.masa}, Radio: {planeta.radio}\")\n",
    "\n",
    "class SistemaJerarquico:\n",
    "    def __init__(self, *estrellas):\n",
    "        self.estrellas = list(estrellas)\n",
    "\n",
    "    def estrellas_ordenadas_por_masa(self):\n",
    "        return sorted(self.estrellas, key=lambda x: x._masa)\n",
    "\n",
    "    def nombres_estrellas_letras_ordenadas(self):\n",
    "        letras = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n",
    "        nombres = [estrella.nombre for estrella in self.estrellas]\n",
    "        nombres_letras = [f\"{nombre}{letra}\" for nombre, letra in zip(nombres, letras)]\n",
    "        return \", \".join(nombres_letras)\n",
    "\n",
    "class Planeta:\n",
    "    def __init__(self, anfitriona, nombre, masa, radio):\n",
    "        self.nombre = nombre\n",
    "        self.masa = masa\n",
    "        self.radio = radio\n",
    "        self._anfitriona = anfitriona\n",
    "\n",
    "    def luminosidad(self):\n",
    "        return self._anfitriona.calcular_luminosidad_total()\n",
    "\n",
    "    def luminosidad_sec_principal(self):\n",
    "        return self._anfitriona.calcular_luminosidad_secuencia_principal()\n",
    "\n",
    "    def period_rot_kepler(self):\n",
    "        # Define this method based on your needs\n",
    "        pass\n",
    "\n",
    "    def metodo_descubrimiento(self):\n",
    "        # Define this method based on your needs\n",
    "        pass\n",
    "\n",
    "    def tatooine(self):\n",
    "        # Define this method based on your needs\n",
    "        pass\n",
    "\n",
    "class Exoplaneta(Planeta):\n",
    "    def metodo_primer_descubrimiento(self, metodo):\n",
    "        # Método de primer descubrimiento: \"imagen directa\", \"velocidad radial\" o \"tránsito\"\n",
    "        return metodo\n",
    "\n",
    "    def es_similar_tatooine(self):\n",
    "        if isinstance(self._anfitriona, Estrella) and self._anfitriona.nombre.lower() == \"binaria\":\n",
    "            return True\n",
    "        return False\n",
    "\n",
    "    def parametro_impacto_b(self):\n",
    "        if self.metodo_descubrimiento() == \"tránsito\":\n",
    "            a = 1  # Distancia orbital del planeta alrededor de la estrella (en UA)\n",
    "            e = 0  # Excentricidad de la órbita\n",
    "            i = np.radians(90)  # Inclinación orbital (en radianes)\n",
    "            omega = 0  # Argumento del periastron\n",
    "            R_star = 1  # Radio estelar (en UA)\n",
    "            b = a * np.cos(i) / ((1 - e**2) * (R_star * (1 + e * np.sin(omega))))\n",
    "            return b\n",
    "\n",
    "# Lista de estrellas a buscar en la base de datos\n",
    "estrellas = [\"HR 8799\", \"HD 202206\", \"TRAPPIST-1\", \"TOI-1338\", \"HD 188753\", \"Kepler-451\", \"Kepler-16\"]\n",
    "\n",
    "\n",
    "\n",
    "# Leer los datos de la base de datos\n",
    "df = pd.read_csv(\"descarga.csv\")\n",
    "\n",
    "# Filtrar los planetas que orbitan las estrellas especificadas\n",
    "planetas = []\n",
    "for index, row in df.iterrows():\n",
    "    if row[\"star_name\"] in estrellas:\n",
    "        estrella = Estrella(row[\"star_name\"], row[\"star_mass\"], row[\"star_radius\"], row[\"star_teff\"], row[\"star_distance\"], row[\"ra\"])\n",
    "        planeta = Planeta(estrella, row[\"name\"], row[\"mass\"], row[\"radius\"])\n",
    "        planetas.append(planeta)\n",
    "\n",
    "# Crear un sistema planetario con los planetas encontrados\n",
    "sistema = SistemaPlanetario(*planetas)\n",
    "\n",
    "# Imprimir la información pública del sistema planetario\n",
    "sistema.imprimir_informacion_publica()\n",
    "\n",
    "# Crear un sistema jerárquico con las estrellas encontradas\n",
    "sistema_jerarquico = SistemaJerarquico(*[planeta._anfitriona for planeta in planetas])\n",
    "\n",
    "# Imprimir la lista de estrellas ordenadas por masa\n",
    "print(\"Lista de estrellas ordenadas por masa:\")\n",
    "for estrella in sistema_jerarquico.estrellas_ordenadas_por_masa():\n",
    "    print(f\"{estrella.nombre}: {estrella._masa}\")\n",
    "\n",
    "# Imprimir los nombres de las estrellas seguidos de la lista ordenada de letras del alfabeto\n",
    "print(\"Nombres de las estrellas seguidos de la lista ordenada de letras del alfabeto:\")\n",
    "print(sistema_jerarquico.nombres_estrellas_letras_ordenadas())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.10"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
